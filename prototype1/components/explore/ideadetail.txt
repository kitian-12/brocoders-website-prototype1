
import React, { useState, useEffect, useCallback } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { Textarea } from "@/components/ui/textarea";
import { Separator } from "@/components/ui/separator";
import { Comment, Like, CollaborationRequest } from "@/entities/all";
import { Heart, MessageCircle, Send, User as UserIcon, Calendar, Paperclip, ExternalLink, Users, X as XIcon, Loader2 } from "lucide-react";
import { format } from "date-fns";
import { motion } from "framer-motion";

// Helper function to derive a display name from an email
function getDisplayName(email) {
    if (!email || typeof email !== 'string') {
        return 'Anonymous';
    }
    return email.split('@')[0];
}

export default function IdeaDetail({ idea, user, onLike, onAddComment, onClose }) {
  const [comments, setComments] = useState([]);
  const [newComment, setNewComment] = useState("");
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [isLiked, setIsLiked] = useState(false);
  const [isLoading, setIsLoading] = useState(true);
  const [collaborators, setCollaborators] = useState([]);
  const [hasRequested, setHasRequested] = useState(false);

  const loadDetails = useCallback(async () => {
    if (!idea) return;
    setIsLoading(true);
    try {
      const [commentsData, likesData, collabData] = await Promise.all([
        Comment.filter({ idea_id: idea.id }, "-created_date"),
        user ? Like.filter({ idea_id: idea.id, created_by: user.email }) : [],
        CollaborationRequest.filter({ idea_id: idea.id })
      ]);
      
      setComments(commentsData);
      setIsLiked(likesData.length > 0);
      
      const accepted = collabData.filter(c => c.status === 'accepted');
      setCollaborators(accepted);
      
      if(user) {
        const userRequest = collabData.find(c => c.created_by === user.email);
        setHasRequested(!!userRequest);
      }
    } catch (error) {
      console.error("Failed to load idea details:", error);
    }
    setIsLoading(false);
  }, [idea, user]);

  useEffect(() => {
    loadDetails();
  }, [loadDetails]);

  const handleSubmitComment = async (e) => {
    e.preventDefault();
    if (!newComment.trim() || isSubmitting) return;
    setIsSubmitting(true);
    await onAddComment(idea.id, newComment.trim());
    setNewComment("");
    await loadDetails(); // Reload to show new comment
    setIsSubmitting(false);
  };

  const handleLike = async () => {
    setIsLiked(!isLiked); // Optimistic update
    await onLike(idea.id);
  };
  
  const handleCollaborationRequest = async () => {
    if (!user) return;
    try {
      await CollaborationRequest.create({ idea_id: idea.id, idea_title: idea.title, idea_owner_email: idea.created_by });
      setHasRequested(true);
      alert("Your collaboration request has been sent!");
    } catch (e) {
      console.error("Failed to send collaboration request", e);
      alert("Failed to send request. Please try again.");
    }
  };

  const isOwner = user && user.email === idea.created_by;
  const isCollaborator = user && collaborators.some(c => c.created_by === user.email);

  return (
    <div className="relative h-[90vh] overflow-y-auto p-6">
      <Button variant="ghost" size="icon" className="absolute top-4 right-4 text-gray-400 hover:text-white" onClick={onClose}>
        <XIcon className="w-6 h-6" />
      </Button>

      {isLoading ? (
        <div className="flex items-center justify-center h-full">
            <Loader2 className="w-8 h-8 animate-spin" />
        </div>
      ) : (
        <>
          <CardHeader className="pt-0">
            <Badge className="w-fit mb-4">
              {idea.category}
            </Badge>
            <CardTitle className="text-white text-3xl mb-2">
              {idea.title}
            </CardTitle>
            <div className="flex items-center gap-2 text-gray-400 text-sm mb-4">
              <UserIcon className="w-4 h-4" />
              <span>by {getDisplayName(idea.created_by)}</span>
              <span className="text-gray-600">â€¢</span>
              <Calendar className="w-4 h-4" />
              <span>{format(new Date(idea.created_date), "MMM d, yyyy")}</span>
            </div>
          </CardHeader>
          
          <CardContent className="space-y-8">
            <div>
              <h4 className="text-white font-semibold text-lg mb-2">Problem Statement</h4>
              <p className="text-gray-300 leading-relaxed bg-white/5 p-4 rounded-lg">{idea.problem_statement}</p>
            </div>
            <div>
              <h4 className="text-white font-semibold text-lg mb-2">Proposed Solution</h4>
              <p className="text-gray-300 leading-relaxed">{idea.description}</p>
            </div>

            {idea.attachment_url && (
              <div>
                <h4 className="text-white font-semibold text-lg mb-2">Attachment</h4>
                <a href={idea.attachment_url} target="_blank" rel="noopener noreferrer" className="flex items-center gap-2 text-blue-400 hover:text-blue-300">
                  <Paperclip className="w-4 h-4" />
                  View Attachment <ExternalLink className="w-3 h-3 ml-1" />
                </a>
              </div>
            )}
            
            <Separator className="bg-white/20" />

            <div>
                <h4 className="text-white font-semibold text-lg mb-4">Collaboration</h4>
                { !isOwner && (
                    <Button onClick={handleCollaborationRequest} disabled={hasRequested || !user} className="w-full">
                        <Users className="w-4 h-4 mr-2" />
                        {hasRequested ? "Collaboration Requested" : "Request to Collaborate"}
                    </Button>
                )}
                { collaborators.length > 0 && (
                    <div className="mt-4 space-y-2">
                        <h5 className="text-gray-300 text-sm">Accepted Collaborators:</h5>
                        <ul className="list-disc list-inside text-sm space-y-1 pl-1">
                            {collaborators.map(c => <li key={c.id} className="text-gray-300">
                                {getDisplayName(c.created_by)}
                                {(isOwner || isCollaborator) && <span className="text-blue-400 ml-2">({c.created_by})</span>}
                            </li>)}
                        </ul>
                    </div>
                )}
            </div>

            <Separator className="bg-white/20" />

            <div>
              <h4 className="text-white font-semibold text-lg mb-4">Discussion ({comments.length})</h4>
              <form onSubmit={handleSubmitComment} className="mb-6">
                <Textarea placeholder="Share your thoughts..." value={newComment} onChange={(e) => setNewComment(e.target.value)} disabled={!user} className="bg-white/10 border-white/20 mb-3" />
                <Button type="submit" disabled={!newComment.trim() || isSubmitting || !user} className="bg-blue-600 hover:bg-blue-700">
                  <Send className="w-4 h-4 mr-2" /> Post Comment
                </Button>
              </form>
              <div className="space-y-4">
                {comments.map((comment) => (
                  <div key={comment.id} className="bg-white/5 p-3 rounded-lg">
                    <div className="flex items-center gap-2 mb-2 text-sm">
                      <span className="font-semibold text-gray-300">{getDisplayName(comment.created_by)}</span>
                      <span className="text-gray-500">{format(new Date(comment.created_date), "MMM d, h:mm a")}</span>
                    </div>
                    <p className="text-gray-300">{comment.comment_text}</p>
                  </div>
                ))}
              </div>
            </div>
          </CardContent>
        </>
      )}
    </div>
  );
}
