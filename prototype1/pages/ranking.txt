import React, { useState, useEffect } from "react";
import { Idea } from "@/entities/Idea";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Loader2, Trophy, Award, Lightbulb } from "lucide-react";
import { motion } from "framer-motion";

export default function RankingPage() {
  const [rankings, setRankings] = useState([]);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const calculateRankings = async () => {
      try {
        const allIdeas = await Idea.list();
        const userScores = {};

        allIdeas.forEach(idea => {
          const userEmail = idea.created_by;
          if (!userScores[userEmail]) {
            userScores[userEmail] = {
              email: userEmail,
              name: userEmail.split('@')[0], // Simple name extraction
              ideasCount: 0,
              likesCount: 0,
              commentsCount: 0,
              totalScore: 0
            };
          }
          userScores[userEmail].ideasCount += 1;
          userScores[userEmail].likesCount += (idea.likes_count || 0);
          userScores[userEmail].commentsCount += (idea.comments_count || 0);
        });

        const rankedUsers = Object.values(userScores).map(user => {
          user.totalScore = user.likesCount * 2 + user.commentsCount;
          return user;
        }).sort((a, b) => b.totalScore - a.totalScore);
        
        setRankings(rankedUsers);
      } catch (error) {
        console.error("Failed to calculate rankings:", error);
      } finally {
        setIsLoading(false);
      }
    };

    calculateRankings();
  }, []);

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <Loader2 className="w-8 h-8 animate-spin text-white" />
      </div>
    );
  }

  const rankColors = [
    "text-yellow-400",
    "text-gray-300",
    "text-yellow-600"
  ];

  return (
    <div className="min-h-screen p-4 md:p-8">
      <motion.div
        initial={{ opacity: 0, y: 20 }}
        animate={{ opacity: 1, y: 0 }}
        transition={{ duration: 0.5 }}
        className="max-w-4xl mx-auto"
      >
        <div className="text-center mb-12">
          <Trophy className="w-16 h-16 mx-auto mb-4 text-yellow-400" />
          <h1 className="text-4xl font-bold text-white">Community Leaderboard</h1>
          <p className="text-gray-400 mt-2">See who's making the biggest impact on BroCoders.</p>
        </div>

        <div className="space-y-4">
          {rankings.map((user, index) => (
            <motion.div
              key={user.email}
              initial={{ opacity: 0, x: -20 }}
              animate={{ opacity: 1, x: 0 }}
              transition={{ delay: index * 0.1 }}
            >
              <Card className="bg-white/10 backdrop-blur-sm border-white/20 hover:border-blue-400 transition-colors">
                <CardContent className="p-4 flex items-center gap-4">
                  <div className={`w-12 text-center text-2xl font-bold ${rankColors[index] || 'text-white'}`}>
                    #{index + 1}
                  </div>
                  <Avatar className="w-12 h-12 text-xl bg-gradient-to-br from-blue-500 to-purple-600">
                    <AvatarFallback className="bg-transparent text-white font-bold">
                      {user.name.charAt(0).toUpperCase()}
                    </AvatarFallback>
                  </Avatar>
                  <div className="flex-1">
                    <h3 className="text-lg font-semibold text-white">{user.name}</h3>
                    <p className="text-sm text-gray-400">{user.email}</p>
                  </div>
                  <div className="hidden md:flex items-center gap-6 text-center">
                    <div>
                      <p className="font-bold text-lg text-white">{user.ideasCount}</p>
                      <p className="text-xs text-gray-400">Ideas</p>
                    </div>
                    <div>
                      <p className="font-bold text-lg text-white">{user.likesCount}</p>
                      <p className="text-xs text-gray-400">Likes</p>
                    </div>
                    <div>
                      <p className="font-bold text-lg text-white">{user.commentsCount}</p>
                      <p className="text-xs text-gray-400">Comments</p>
                    </div>
                  </div>
                  <div className="text-right">
                    <p className="text-xl font-bold text-blue-400">{user.totalScore}</p>
                    <p className="text-xs text-gray-400">Total Score</p>
                  </div>
                </CardContent>
              </Card>
            </motion.div>
          ))}
        </div>
      </motion.div>
    </div>
  );
}
