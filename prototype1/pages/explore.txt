import { User } from "@/entities/User";
import { Idea, Like, Comment } from "@/entities/all";
import { Search, Loader2 } from "lucide-react";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { motion, AnimatePresence } from "framer-motion";

import IdeaCard from "../components/explore/IdeaCard";
import IdeaDetail from "../components/explore/IdeaDetail";
import { Dialog, DialogContent } from "@/components/ui/dialog";

export default function ExplorePage() {
  const [user, setUser] = useState(null);
  const [ideas, setIdeas] = useState([]);
  const [filteredIdeas, setFilteredIdeas] = useState([]);
  const [selectedIdea, setSelectedIdea] = useState(null);
  const [isLoading, setIsLoading] = useState(true);
  const [searchQuery, setSearchQuery] = useState("");
  const [categoryFilter, setCategoryFilter] = useState("all");
  const [sortBy, setSortBy] = useState("-created_date");

  const loadIdeas = useCallback(async (sortOrder) => {
    setIsLoading(true);
    try {
      const fetchedIdeas = await Idea.list(sortOrder);
      setIdeas(fetchedIdeas);
    } catch (error) {
      console.error("Failed to load ideas:", error);
    }
    setIsLoading(false);
  }, []);

  const initializePage = useCallback(async () => {
    try {
      const currentUser = await User.me();
      setUser(currentUser);
    } catch (error) {
      setUser(null);
    }
    await loadIdeas(sortBy);
  }, [loadIdeas, sortBy]);

  useEffect(() => {
    initializePage();
  }, [initializePage]);

  const filterIdeas = useCallback(() => {
    let filtered = ideas;

    if (searchQuery) {
      filtered = filtered.filter(idea => 
        idea.title.toLowerCase().includes(searchQuery.toLowerCase()) ||
        idea.description.toLowerCase().includes(searchQuery.toLowerCase())
      );
    }

    if (categoryFilter !== "all") {
      filtered = filtered.filter(idea => idea.category === categoryFilter);
    }

    filtered.sort((a, b) => {
      switch (sortBy) {
        case "-likes_count": return (b.likes_count || 0) - (a.likes_count || 0);
        case "-comments_count": return (b.comments_count || 0) - (a.comments_count || 0);
        case "-created_date": default: return new Date(b.created_date) - new Date(a.created_date);
      }
    });

    setFilteredIdeas(filtered);
  }, [ideas, searchQuery, categoryFilter, sortBy]);

  useEffect(() => {
    filterIdeas();
  }, [filterIdeas]);

  const handleLikeIdea = async (ideaId) => {
    if (!user) {
      alert("Please sign in to like ideas.");
      return;
    }
    
    try {
      const ideaToUpdate = ideas.find(i => i.id === ideaId);
      if (!ideaToUpdate) return;
  
      const existingLikes = await Like.filter({ idea_id: ideaId, created_by: user.email });
      let newLikesCount;
  
      if (existingLikes.length > 0) {
        await Like.delete(existingLikes[0].id);
        newLikesCount = Math.max(0, (ideaToUpdate.likes_count || 0) - 1);
      } else {
        await Like.create({ idea_id: ideaId });
        newLikesCount = (ideaToUpdate.likes_count || 0) + 1;
      }
      
      await Idea.update(ideaId, { likes_count: newLikesCount });
  
      const updateState = (items) => items.map(item => 
        item.id === ideaId ? { ...item, likes_count: newLikesCount } : item
      );
      setIdeas(updateState);
      if (selectedIdea && selectedIdea.id === ideaId) {
        setSelectedIdea(prev => ({...prev, likes_count: newLikesCount}));
      }
  
    } catch (error) {
      console.error("Failed to toggle like:", error);
      alert("There was an error. Please try again.");
    }
  };

  const handleAddComment = async (ideaId, commentText) => {
    if (!user) {
        alert("Please sign in to comment.");
        return;
    }

    try {
      await Comment.create({ idea_id: ideaId, comment_text: commentText });
      const idea = ideas.find(i => i.id === ideaId);
      const newCommentsCount = (idea.comments_count || 0) + 1;
      await Idea.update(ideaId, { comments_count: newCommentsCount });
      
      const updateState = (items) => items.map(item => 
        item.id === ideaId ? { ...item, comments_count: newCommentsCount } : item
      );
      setIdeas(updateState);
      if (selectedIdea && selectedIdea.id === ideaId) {
        setSelectedIdea(prev => ({...prev, comments_count: newCommentsCount}));
      }
      
    } catch (error) {
      console.error("Failed to add comment:", error);
      alert("There was an error adding your comment.");
    }
  };

  return (
    <div className="min-h-screen p-4 md:p-8">
      <div className="max-w-7xl mx-auto">
        <div className="mb-8">
          <h1 className="text-3xl md:text-4xl font-bold text-white mb-4">Explore Ideas</h1>
          <p className="text-gray-400 text-lg">Discover innovative ideas from our community of creators</p>
        </div>

        <div className="mb-8 space-y-4">
          <div className="flex flex-col md:flex-row gap-4">
            <div className="relative flex-1">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 w-5 h-5 text-gray-400" />
              <Input
                placeholder="Search ideas..."
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="pl-10 bg-white/10 border-white/20 text-white placeholder-gray-400"
              />
            </div>
            <Select value={categoryFilter} onValueChange={setCategoryFilter}>
              <SelectTrigger className="w-full md:w-48 bg-white/10 border-white/20 text-white">
                <SelectValue placeholder="All Categories" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="all">All Categories</SelectItem>
                <SelectItem value="technology">Technology</SelectItem>
                <SelectItem value="business">Business</SelectItem>
                <SelectItem value="design">Design</SelectItem>
                <SelectItem value="health">Health</SelectItem>
                <SelectItem value="education">Education</SelectItem>
                <SelectItem value="entertainment">Entertainment</SelectItem>
                <SelectItem value="other">Other</SelectItem>
              </SelectContent>
            </Select>
            <Select value={sortBy} onValueChange={(val) => { setSortBy(val); loadIdeas(val); }}>
              <SelectTrigger className="w-full md:w-48 bg-white/10 border-white/20 text-white">
                <SelectValue placeholder="Sort by" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="-created_date">Newest First</SelectItem>
                <SelectItem value="-likes_count">Most Liked</SelectItem>
                <SelectItem value="-comments_count">Most Discussed</SelectItem>
              </SelectContent>
            </Select>
          </div>
        </div>
        
        {isLoading ? (
          <div className="flex justify-center py-12">
            <Loader2 className="w-8 h-8 animate-spin text-white" />
          </div>
        ) : (
          <AnimatePresence>
            {filteredIdeas.length > 0 ? (
              <motion.div 
                className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                exit={{ opacity: 0 }}
              >
                {filteredIdeas.map((idea, index) => (
                  <IdeaCard
                    key={idea.id}
                    idea={idea}
                    user={user}
                    onLike={handleLikeIdea}
                    onSelect={() => setSelectedIdea(idea)}
                    index={index}
                  />
                ))}
              </motion.div>
            ) : (
              <motion.div
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                className="text-center py-12"
              >
                <div className="w-16 h-16 mx-auto mb-4 bg-white/10 rounded-2xl flex items-center justify-center">
                  <Search className="w-8 h-8 text-gray-400" />
                </div>
                <h3 className="text-xl font-semibold text-white mb-2">No Ideas Found</h3>
                <p className="text-gray-400">Try adjusting your search or filters.</p>
              </motion.div>
            )}
          </AnimatePresence>
        )}
      </div>

      <Dialog open={!!selectedIdea} onOpenChange={() => setSelectedIdea(null)}>
        <DialogContent className="max-w-4xl w-full bg-slate-900/90 backdrop-blur-xl border-gray-700 text-white p-0">
          {selectedIdea && (
            <IdeaDetail 
              idea={selectedIdea}
              user={user}
              onLike={handleLikeIdea}
              onAddComment={handleAddComment}
              onClose={() => setSelectedIdea(null)}
            />
          )}
        </DialogContent>
      </Dialog>
    </div>
  );
}